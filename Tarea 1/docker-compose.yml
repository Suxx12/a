services: 
  scrapper:
    build: ./m1_scrapper   # Esto entra a la carpeta scrapper y buildea el Dockerfile que esta adentro
    container_name: waze-scrapper-general
    volumes:
      - ./m1_scrapper/jsons:/app/jsons   # Esto mapea la carpeta datos del host a la carpeta /app/jsons dentro del contenedor
    depends_on:
      - mongo # Se usa el nombre del servicio

  mongo: #Servidor de base de datos
    image: mongo:latest
    container_name: mongodb-general
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - mongo_data:/data/db # Volumen gestionado por docker =! carpeta en local mapeada

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express-general
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_BASICAUTH: "false"
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - mongo # Se usa el nombre del servicio
  redis:
    image: redis:6.0.7
    container_name: redis_general
    restart: always
    ports:
      - 6379:6379
    volumes:
      - redis_volume_data:/data

  redis_insight:
    image: redislabs/redisinsight:1.14.0
    container_name: redis_insight_general
    restart: always
    ports:
      - 8001:8001
    volumes:
      - redis_insight_volume_data:/db

  python_app:
    build: ./m3-cache/app
    container_name: redis_python_app_general
    restart: on-failure
    depends_on:
      - redis

#Aca no es necesario definir una red comun para todos los contenedores
#porque con docker compose esta red se crea de forma automatica "directorio_default"

#

#networks:
 # app-network:
  #  driver: bridge

volumes:
  mongo_data:
  redis_volume_data:
  redis_insight_volume_data:
    