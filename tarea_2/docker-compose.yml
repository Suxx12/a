services: 
  scrapper:
    build: ./m1_scrapper   # Esto entra a la carpeta scrapper y buildea el Dockerfile que esta adentro
    container_name: waze-scrapper-general
    volumes:
      - ./m1_scrapper/jsons:/app/jsons   # Esto mapea la carpeta datos del host a la carpeta /app/jsons dentro del contenedor
    depends_on:
      - mongo # Se usa el nombre del servicio

  mongo: #Servidor de base de datos
    image: mongo:latest
    container_name: mongodb-general
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
    volumes:
      - mongo_data:/data/db # Volumen gestionado por docker =! carpeta en local mapeada

  mongo-express:
    image: mongo-express:latest
    container_name: mongo-express-general
    ports:
      - "8081:8081"
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: admin
      ME_CONFIG_MONGODB_ADMINPASSWORD: admin123
      ME_CONFIG_BASICAUTH: "false"
      ME_CONFIG_MONGODB_SERVER: mongo
    depends_on:
      - mongo # Se usa el nombre del servicio
  redis:
    image: redis:6.0.7
    container_name: redis_general
    restart: always
    ports:
      - 6379:6379
    volumes:
      - ./m3-cache/redis.conf:/usr/local/etc/redis/redis.conf
    command: [sh, -c, "rm -f /data/dump.rdb && redis-server /usr/local/etc/redis/redis.conf"] #Elimina persistencia lee archivo de configuracion para tama√±o maximo y politica de remocion
    #volumes:
    #  - redis_volume_data:/data

  redis_insight:
    image: redislabs/redisinsight:1.14.0
    container_name: redis_insight_general
    restart: always
    ports:
      - 8001:8001
    #volumes:
    #  - redis_insight_volume_data:/db
  
  api_server:
    build: ./m4-server
    container_name: api_server_general
    depends_on:
      - mongo
      - redis
      - redis_insight
    restart: on-failure
    ports:
      - "5000:5000"
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://admin:admin123@mongo:27017/
      - MONGO_DB=trafico_rm

  # Servicio para cargar archivos JSON a MongoDB
  json_loader:
    build: ./m0_cargajson
    container_name: json-loader-general
    volumes:
      - ./m0_cargajson/jsons:/app/jsons
    environment:
      - MONGODB_URI=mongodb://admin:admin123@mongo:27017/
      - MONGODB_DB=trafico_rm
      - MONGODB_COLECCION_ALERTAS=alertas
      - MONGODB_COLECCION_ATASCOS=atascos
    depends_on:
      - mongo

  #generador_trafico_normal_cache:
  #  build: ./m5-generador-trafico/Normal
   # container_name: generador_trafico_normal_cache_general
    #depends_on:
     # - mongo
      #- redis
      #- api_server
   # volumes:
    #  - ./m5-generador-trafico/Normal:/app

  generador_trafico_zipf_cache:
    build: ./m5-generador-trafico/ZipF
    container_name: generador_trafico_zipf_cache_general
    depends_on:
      - mongo
      - redis
      - api_server
    volumes:
      - ./m5-generador-trafico:/app
  
  filtering:
    build: ./m7-filtering
    container_name: m7-filtering-general
    volumes:
      - ./m7-filtering/data:/app/data
      - ./m7-filtering/results:/app/results
      - ./m7-filtering/data_preprocesada:/app/data_preprocesada
    environment:
      - MONGODB_URI=mongodb://admin:admin123@mongo:27017/
      - MONGODB_DB=trafico_rm
      - MONGODB_COLECCION_ALERTAS=alertas
      - MONGODB_COLECCION_ATASCOS=atascos
    depends_on:
      json_loader:
        condition: service_completed_successfully
      scrapper:
        condition: service_completed_successfully
      mongo:
        condition: service_started
#Aca no es necesario definir una red comun para todos los contenedores
#porque con docker compose esta red se crea de forma automatica "directorio_default"

#

#networks:
 # app-network:
  #  driver: bridge

volumes:
  mongo_data:
  #redis_volume_data:
  #redis_insight_volume_data:
    